pipeline {
    options {
        timestamps()
    }
    agent any
    environment {
        fail_job="Checkout"
    }
    stages {
        stage("Checkout") {
            steps {
                deleteDir()
                checkout scm
                sh 'git config --global user.email "jenkins@xtz.c"'
                sh 'git config --global user.name "jenkins"'
                script {
                    if ("${version}" != ""){
                        try {
                            sh 'git checkout release/$version'
                            sh 'echo "${version}.$(($(tail -1 version.txt | cut -d "." -f3 | cut -d " " -f1) + 1)) NOT FOR RELEASE" > version.txt'
                        }
                        catch (exc) {
                            sh 'git checkout -b release/$version'
                            sh 'touch version.txt'
                            sh 'echo "${version}.0 NOT FOR RELEASE" > version.txt' 
                        }
                        sh 'git add -A'
                        sh 'git commit -m "[ci-skip] $(tail version.txt)"'
                        
                        withCredentials([string(credentialsId: 'gitlab_api_token', variable: 'TOKEN')]) { 
                            sh 'git push http://jenkins:$TOKEN@35.176.56.212/maciejgroszyk/cowsay_builder'
                        } 
                        CURRENT_BRANCH = sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()
                    } else {
                        CURRENT_BRANCH = sh(returnStdout: true, script: 'git log --all --decorate | head -1 | cut -d "(" -f2 | cut -d ")" -f1 ').trim()
                        if ("${CURRENT_BRANCH}".contains('release/')){
                            version = sh(returnStdout: true, script: 'git log --all --decorate | head -1 | cut -d "(" -f2 | cut -d ")" -f1  |cut -d "/" -f3| cut -c1-3').trim()
                            sh "git checkout release/${version}"
                            updated = sh(returnStdout: true, script: 'echo $(($(tail -1 version.txt | cut -d "." -f3 | cut -d " " -f1) + 1))').trim()

                            sh "echo -n '${version}' > version.txt"
                            sh "echo -n '.' >> version.txt"
                            sh "echo -n '${updated}' >> version.txt"
                            sh "echo -n ' NOT FOR RELEASE' >> version.txt"
                        }
                    }
                }
            }
        }
        stage('Build') {
            steps {
                script{
                    fail_job="build"
                }
                updateGitlabCommitStatus name: 'build', state: 'pending'
                echo 'Building..'
                sh "docker build -t cowsay ."
                updateGitlabCommitStatus name: 'build', state: 'success'
            }
        }
        stage('Test'){
            when { 
                expression{
                    "${CURRENT_BRANCH}".contains('release/')                
                }
            }
            steps {
                script{
                    fail_job="test"
                }
                updateGitlabCommitStatus name: 'test', state: 'pending'
                sh "docker rm -f cowsay_app"
                sh "docker run -dp 2137:8080 --name cowsay_app cowsay"
                sleep 5
                sh "curl -i http://35.176.56.212:2137 | grep 200"
                updateGitlabCommitStatus name: 'test', state: 'success'
            }
        }
        stage('Deploy on gitlab'){
            when { 
                expression{
                    "${CURRENT_BRANCH}".contains('release/')                
                }
            }
            steps{
                sh 'echo "$(cut -d " " -f1 version.txt) FOR RELEASE" > version.txt'
                sh 'git add -A'
                sh 'git commit -m "[ci-skip] $(tail version.txt)"'
                sh 'git tag "$(cut -d " " -f1 version.txt)"'
                withCredentials([string(credentialsId: 'gitlab_api_token', variable: 'TOKEN')]) { 
                    sh 'git push http://jenkins:$TOKEN@35.176.56.212/maciejgroszyk/cowsay_builder'
                    sh 'git push http://jenkins:$TOKEN@35.176.56.212/maciejgroszyk/cowsay_builder tag $(cut -d " " -f1 version.txt)'
                } 
            }
        }
        stage('Deploy on ecr'){
            when { 
                expression{
                    "${CURRENT_BRANCH}".contains('release/')                
                }
            }
            steps {
                script{
                    fail_job="deploy_ecr"
                }
                updateGitlabCommitStatus name: 'deploy_ecr', state: 'pending'
                sh "aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin 644435390668.dkr.ecr.eu-west-2.amazonaws.com"
                sh 'docker tag cowsay 644435390668.dkr.ecr.eu-west-2.amazonaws.com/maciejgroszyklavagna:"$(cut -d " " -f1 version.txt)"'
                sh 'docker push 644435390668.dkr.ecr.eu-west-2.amazonaws.com/maciejgroszyklavagna:"$(cut -d " " -f1 version.txt)"'
                echo 'Deploying'
                updateGitlabCommitStatus name: 'deploy_ecr', state: 'success'
            }
        }
        stage('Deploy on ec2'){
            when { 
                expression{
                    "${CURRENT_BRANCH}".contains('release/')                
                }
            }
            steps {
                script{
                    fail_job="deploy_ec2"
                }
                updateGitlabCommitStatus name: 'deploy_ec2', state: 'pending'
                sh 'ssh -i /home/jenkins/ssh/londonmaciejgroszyk.pem ubuntu@ec2-18-132-119-238.eu-west-2.compute.amazonaws.com "docker rm -f cowsay"'
                sh 'ssh -i /home/jenkins/ssh/londonmaciejgroszyk.pem ubuntu@ec2-18-132-119-238.eu-west-2.compute.amazonaws.com "docker system prune -af"'
                sh "aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin 644435390668.dkr.ecr.eu-west-2.amazonaws.com"
                sh 'ssh -i /home/jenkins/ssh/londonmaciejgroszyk.pem ubuntu@ec2-18-132-119-238.eu-west-2.compute.amazonaws.com "docker pull 644435390668.dkr.ecr.eu-west-2.amazonaws.com/maciejgroszyklavagna:$(cut -d " " -f1 version.txt)"'
                sh 'ssh -i /home/jenkins/ssh/londonmaciejgroszyk.pem ubuntu@ec2-18-132-119-238.eu-west-2.compute.amazonaws.com "docker run -dp 2137:8080 --name cowsay 644435390668.dkr.ecr.eu-west-2.amazonaws.com/maciejgroszyklavagna:$(cut -d " " -f1 version.txt)"'
                updateGitlabCommitStatus name: 'deploy_ec2', state: 'success'
                
            }
        }
    }
    
    post {  
         failure {  
             updateGitlabCommitStatus name: "${fail_job}", state: 'failed'
             emailext recipientProviders: [culprits()],
                        subject: 'Build failure', body: 'OMG, you broke the build!',
                        attachLog: true, compressLog: true
         } 
         success {
                emailext recipientProviders: [culprits()],
                subject: 'Build success gratz!', body: 'OMG, you did it!',
                attachLog: true, compressLog: true
         } 
     }  
}

